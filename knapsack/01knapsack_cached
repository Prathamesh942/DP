public:
    int fun(int w, int wt[], int val[], int n, int i, vector<vector<int>>& dp) {
        // Base case: If no items left or weight capacity is zero
        if (i == n || w == 0) {
            return 0;
        }

        // Check if value is already computed
        if (dp[w][i] != -1) {
            return dp[w][i];
        }

        // Skip the current item if its weight exceeds the current capacity
        int exc = fun(w, wt, val, n, i + 1, dp);
        int inc = 0;

        // Include the current item if it can fit
        if (wt[i] <= w) {
            inc = val[i] + fun(w - wt[i], wt, val, n, i + 1, dp);
        }

        // Store the result in the dp array
        return dp[w][i] = max(inc, exc);
    }

    int knapSack(int W, int wt[], int val[], int n) { 
        // Initialize dp array with -1
        vector<vector<int>> dp(W + 1, vector<int>(n + 1, -1));
        return fun(W, wt, val, n, 0, dp);
    }